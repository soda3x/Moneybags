/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.8/userguide/building_java_projects.html
 */

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'moneybags.app.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javafx {
    version = "21.0.3"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

jar {
    manifest {
        attributes(
            'Main-Class': 'moneybags.app.App'
        )
    }
}

task createRuntimeImage(type: Exec) {
    description = 'Creates a runtime image using jlink'
    group = 'Distribution'

    def jlink      = System.getenv('JAVA_HOME') ? "${System.getenv('JAVA_HOME')}/bin/jlink" : 'jlink'
    def runtimeDir = "${projectDir}/bin/runtime"

    doFirst {
        def runtime = file(runtimeDir)
        if (runtime.exists()) {
            runtime.deleteDir()
        }
    }

    commandLine jlink,
        '--module-path', "${System.getenv('JAVA_HOME')}/jmods;${System.getenv('OPENJFX_HOME')}/lib",
        '--add-modules', 'java.base,javafx.controls,javafx.fxml',
        '--output', runtimeDir,
        '--strip-debug',
        '--no-header-files',
        '--no-man-pages',
        '--compress', 'zip-6'
}

task dist(type: Exec) {
    dependsOn build, createRuntimeImage, jar
    description = 'Creates a self-contained executable using jpackage'
    group       = 'Distribution'

    def javaHome   = System.getenv('JAVA_HOME')
    def jpackage   = javaHome ? "${javaHome}/bin/jpackage" : 'jpackage'
    def outputDir  = "${projectDir}/bin/dist"
    def runtimeDir = "${projectDir}/bin/runtime"

    doFirst {
        delete fileTree(outputDir)
        mkdir outputDir
    }

    commandLine jpackage,
        '--input', "$buildDir/libs",
        '--name', 'Moneybags',
        '--main-class', 'moneybags.app.App',
        '--main-jar', jar.archiveFileName.get(),
        '--runtime-image', runtimeDir,
        '--app-version', '1.0', // TODO: Replace this with real app version
        '--icon', 'src/main/resources/icon.ico',
        '--type', 'app-image',
        '--dest', outputDir
}

task superclean {
    doLast {
        def binDir   = file("${projectDir}/bin")
        def buildDir = file("${projectDir}/build")

        if (binDir.exists()) {
            binDir.deleteDir()
        }

        if (buildDir.exists()) {
            buildDir.deleteDir()
        }
    }
}

clean.dependsOn superclean